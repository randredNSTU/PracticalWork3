//Задача "Голодные игры": В начале года были 4 группы по 35 человек. 
//Но после неуспешно сданной сессии, в каждой группе осталось разное количество студентов. 
//Нужно посчитать среднее количество человек в каждой группе.

#include <iostream>    // Подключаем библиотеку для ввода/вывода
#include <vector>      // Подключаем библиотеку для использования векторов
#include <algorithm>   // Подключаем библиотеку для использования алгоритмов
#include <numeric>     // Подключаем библиотеку для использования функции accumulate
#include <ctime>       // Подключаем библиотеку для инициализации генератора случайных чисел
#include <cstdlib>     // Подключаем библиотеку для генерации случайных чисел

using namespace std;   // Использование пространства имен std

int main() {
    const int initialStudentsPerGroup = 35; // Количество студентов в начале года в каждой группе
    const int totalGroups = 4;              // Общее количество групп

    // Инициализация генератора случайных чисел
    srand(static_cast<unsigned int>(time(0)));

    // Вектор для хранения количества студентов в каждой группе
    vector<int> studentsPerGroup(totalGroups, initialStudentsPerGroup);

    // Случайное определение количества покинувших студентов для каждой группы
    int totalLeft = 0; // Переменная для хранения общего числа покинувших студентов
    for (auto& students : studentsPerGroup) {
        int left = rand() % (students / 2); // Генерируем количество покинувших (до половины группы)
        students -= left; // Уменьшаем количество студентов на количество покинувших
        totalLeft += left; // Увеличиваем общий счетчик покинувших студентов
    }

    // Вывод количества студентов в каждой группе после сессии
    cout << "Количество студентов в каждой группе после сессии:" << endl;
    for (int i = 0; i < totalGroups; ++i) {
        cout << "Группа " << i + 1 << ": " << studentsPerGroup[i] << " студентов" << endl;
    }

    // Подсчет среднего количества студентов в каждой группе
    double averageStudents = accumulate(studentsPerGroup.begin(), studentsPerGroup.end(), 0.0) / totalGroups;

    // Вывод среднего количества студентов
    cout << "Среднее количество студентов в каждой группе: " << averageStudents << endl;

    // Вывод общего количества отчисленных студентов
    cout << "Общее количество отчисленных студентов: " << totalLeft << endl;

    return 0;
}
